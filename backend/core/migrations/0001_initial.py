# Generated by Django 4.2 on 2025-08-21 17:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_custom', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Activities',
            },
        ),
        migrations.CreateModel(
            name='ChecklistFrameworkMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('emirate', models.CharField(choices=[('dubai', 'Dubai'), ('abu_dhabi', 'Abu Dhabi'), ('sharjah', 'Sharjah'), ('ajman', 'Ajman'), ('umm_al_quwain', 'Umm Al Quwain'), ('ras_al_khaimah', 'Ras Al Khaimah'), ('fujairah', 'Fujairah')], max_length=100)),
                ('sector', models.CharField(choices=[('hospitality', 'Hospitality'), ('real_estate', 'Real Estate'), ('financial_services', 'Financial Services'), ('manufacturing', 'Manufacturing'), ('technology', 'Technology'), ('healthcare', 'Healthcare'), ('education', 'Education'), ('retail', 'Retail')], max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='DataElement',
            fields=[
                ('element_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_metered', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('must_have', 'Must Have'), ('conditional', 'Conditional')], max_length=50)),
                ('unit', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Framework',
            fields=[
                ('framework_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('mandatory', 'Mandatory'), ('voluntary', 'Voluntary'), ('mandatory_conditional', 'Mandatory Conditional')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('condition_emirate', models.CharField(blank=True, max_length=100)),
                ('condition_sector', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ProfilingQuestion',
            fields=[
                ('question_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('activates_element', models.ForeignKey(help_text='The conditional data element this question activates', on_delete=django.db.models.deletion.CASCADE, to='core.dataelement')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
                ('account_number', models.CharField(blank=True, max_length=255)),
                ('location_description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=True)),
                ('cadence', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dataelement')),
                ('frameworks', models.ManyToManyField(through='core.ChecklistFrameworkMapping', to='core.framework')),
            ],
            options={
                'unique_together': {('company', 'element')},
            },
        ),
        migrations.AddField(
            model_name='checklistframeworkmapping',
            name='checklist_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.companychecklist'),
        ),
        migrations.AddField(
            model_name='checklistframeworkmapping',
            name='framework',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.framework'),
        ),
        migrations.CreateModel(
            name='DataElementFrameworkMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cadence', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], max_length=50)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dataelement')),
                ('framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.framework')),
            ],
            options={
                'unique_together': {('element', 'framework')},
            },
        ),
        migrations.CreateModel(
            name='CompanyProfileAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.BooleanField()),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profilingquestion')),
            ],
            options={
                'unique_together': {('company', 'question')},
            },
        ),
        migrations.CreateModel(
            name='CompanyFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_auto_assigned', models.BooleanField(default=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.framework')),
            ],
            options={
                'unique_together': {('company', 'framework')},
            },
        ),
        migrations.CreateModel(
            name='CompanyDataSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_year', models.PositiveIntegerField()),
                ('reporting_period', models.CharField(max_length=50)),
                ('value', models.TextField(blank=True)),
                ('evidence_file', models.FileField(blank=True, upload_to='evidence/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dataelement')),
                ('meter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.meter')),
            ],
            options={
                'unique_together': {('company', 'element', 'meter', 'reporting_year', 'reporting_period')},
            },
        ),
        migrations.CreateModel(
            name='CompanyActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.activity')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
            ],
            options={
                'verbose_name_plural': 'Company Activities',
                'unique_together': {('company', 'activity')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='checklistframeworkmapping',
            unique_together={('checklist_item', 'framework')},
        ),
    ]
